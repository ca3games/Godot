[gd_scene load_steps=6 format=2]

[ext_resource path="res://addons/midi/MidiPlayer.gd" type="Script" id=1]
[ext_resource path="res://addons/midi/icon.png" type="Texture" id=2]
[ext_resource path="res://Themes/Default.tres" type="Theme" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

onready var midi_player = $GodotMIDIPlayer
var tempo_changing = false
#var ui_channels
var SMF = preload( \"res://addons/midi/SMF.gd\" )
var file = \"\"

var names = load(\"res://Scripts/MIDInames.gd\")
var midi_names

onready var level = preload(\"res://Scenes/Level.tscn\")

\"\"\"
	Initializes
\"\"\"
func _ready( ):
	$CanvasLayer/FileDialog.current_dir = OS.get_system_dir(OS.SYSTEM_DIR_DOWNLOADS)
	$CanvasLayer/SoundBank.current_dir = OS.get_system_dir(OS.SYSTEM_DIR_DOWNLOADS)
	
	file = Config.midi
	if file == \"\":
		$CanvasLayer/VBoxContainer/HBoxContainer3/File.text = \"FILE NOT LOADED\"
	else:
		$CanvasLayer/VBoxContainer/HBoxContainer3/File.text = file

	$GodotMIDIPlayer.soundfont = Config.soundbank
	if $GodotMIDIPlayer.soundfont == \"\":
		$CanvasLayer/HBoxContainer/Label.text = \"SF2 file not loaded\"
	else:
		$CanvasLayer/HBoxContainer/Label.text = $GodotMIDIPlayer.soundfont
	
	midi_names = names.new()
	#self._setup_channel_status_viewers( )
	$GodotMIDIPlayer.connect( \"midi_event\", self, \"_on_midi_event\" )
	var tmp = level.instance()
	$Cats.add_child(tmp)


func _setup_channel_status_viewers( ):
	for i in range( 0, len( self.midi_player.channel_status ) ):
		var status = CheckBox.new( )
		status.pressed = false
		self.ui_channels.append( status )
		$VBoxContainer.add_child( status )

\"\"\"
	Process
\"\"\"
func _process( delta:float ):
	self._process_update_apply_ui( )
	$CanvasLayer/VBoxContainer/HBoxContainer4/TimeBar.min_value = 0
	$CanvasLayer/VBoxContainer/HBoxContainer4/TimeBar.max_value = self.midi_player.last_position
	
	$CanvasLayer/VBoxContainer/HBoxContainer4/TimeBar.value = self.midi_player.position

func _process_update_apply_ui( ):
	# Update some values
	self.midi_player.volume_db = $CanvasLayer/VBoxContainer/HBoxContainer2/VolumeBar.value


\"\"\"
	Signals
\"\"\"
func _on_ui_seek_bar_scrolling( ):
	if not self.midi_player.playing:
		self.midi_player.play( )
	self.midi_player.seek( $VBoxContainer/HBoxContainer4/SeekBar.value )

func _on_ui_tempo_focus_entered( ):
	self.tempo_changing = true

func _on_ui_tempo_focus_exited( ):
	self.tempo_changing = false

func _on_ui_tempo_entered( o ):
	var bpm:int = int( $CanvasLayer/VBoxContainer/HBoxContainer3/Tempo.text )
	if 0 <= bpm:
		self.midi_player.tempo = bpm

func _on_OpenButton_pressed( ):
	$CanvasLayer/FileDialog.visible = true

func _on_FileDialog_file_selected( path ):
	$GodotMIDIPlayer.stop( )
	file = path
	Config.midi = path
	Config.Save()
	Config.Load()
	$GodotMIDIPlayer.file = Config.midi
	print(\"****\")
	print($GodotMIDIPlayer.file)
	$CanvasLayer/VBoxContainer/HBoxContainer3/File.text = str(path)
	
	get_tree().get_root().get_node(\"MIDI/Cats/Level\").HideCats()
	

func _on_midi_event( channel, event ):
	# channel is same as $GodotMidiPlayer.channel_status[track_id]
	# event is event parameter. see SMF.gd and MidiPlayer.gd

	#if not $VBoxContainer/HBoxContainer3/OutputEvent.pressed: return
	
	# Output event data to stdout
	var event_string = \"\"
	match event.type:
		SMF.MIDIEventType.note_off:
			get_tree().get_root().get_node(\"MIDI/Cats/Level\")._noteON(channel.number, channel.program, event.note)
		SMF.MIDIEventType.note_on:
			get_tree().get_root().get_node(\"MIDI/Cats/Level\")._noteOFF(channel.number)
		#SMF.MIDIEventType.program_change:
			#event_string = \"ProgramChange %d\" % event.number
		#SMF.MIDIEventType.control_change:
		#	event_string = \"ControlChange %d\" % event.number
		#SMF.MIDIEventType.pitch_bend:
		#	event_string = \"PitchBend %d\" % event.value
		#SMF.MIDIEventType.system_event:
		#	event_string = \"SystemEvent %d\" % event.args.type
	
	#if channel.number == 9  and event.type == SMF.MIDIEventType.note_on:
		#ui_channels[channel.number].text = \"PERCUSSION \" + str(\"\") + \" : \" + str(midi_names.percussion[event.note])
	#else:
		#ui_channels[channel.number].text = \"CHANNEL \" + str(midi_names.instrument[channel.program]) + \" : \" + event_string
	
	#print( channel, event, \"channel:%d event-type:%s\" % [
	#	channel.number,
	#	event_string,
	#])


func _on_Play_pressed():
	if $GodotMIDIPlayer.file != \"\" and $GodotMIDIPlayer.soundfont != \"\":
		$GodotMIDIPlayer.stop( )
		get_tree().get_root().get_node(\"MIDI/Cats/Level\").HideCats()
		$GodotMIDIPlayer.file = Config.midi
		$GodotMIDIPlayer.soundfont = Config.soundbank
		self.midi_player.play( )


func _on_STOP_pressed():
	self.midi_player.position = 0.0
	self.midi_player.stop()
	get_tree().get_root().get_node(\"MIDI/Cats/Level\").HideCats()


func _on_Names_toggled(button_pressed):
	get_tree().get_root().get_node(\"MIDI/Cats/Level\").ShowNames(button_pressed)


func _on_SoundBank_file_selected(path):
	$GodotMIDIPlayer.stop( )
	Config.soundbank = path
	Config.Save()
	Config.Load()
	$GodotMIDIPlayer.soundfont = Config.soundbank
	$CanvasLayer/HBoxContainer/Label.text = $GodotMIDIPlayer.soundfont
	
	get_tree().get_root().get_node(\"MIDI/Cats/Level\").HideCats()
	


func _on_LoadSoundbank_pressed():
	$CanvasLayer/SoundBank.visible = true
"

[sub_resource type="Theme" id=2]

[node name="MIDI" type="Node"]
script = SubResource( 1 )

[node name="GodotMIDIPlayer" type="Node" parent="."]
script = ExtResource( 1 )
__meta__ = {
"_editor_icon": ExtResource( 2 )
}
file = "res://data/awakenin.mid"
playing = true
soundfont = "res://data/Aspirin-Stereo.sf2"
bus = "Rev"

[node name="Cats" type="Node2D" parent="."]

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 4.0
margin_right = -8.0
margin_bottom = -736.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="HBoxContainer3" type="HBoxContainer" parent="CanvasLayer/VBoxContainer"]
margin_right = 784.0
margin_bottom = 25.0
rect_min_size = Vector2( 60, 25 )
__meta__ = {
"_edit_lock_": true
}

[node name="OpenButton" type="Button" parent="CanvasLayer/VBoxContainer/HBoxContainer3"]
margin_right = 50.0
margin_bottom = 25.0
rect_min_size = Vector2( 50, 0 )
theme = ExtResource( 3 )
text = "Open"
__meta__ = {
"_edit_lock_": true
}

[node name="PLAY" type="Button" parent="CanvasLayer/VBoxContainer/HBoxContainer3"]
margin_left = 54.0
margin_right = 104.0
margin_bottom = 25.0
rect_min_size = Vector2( 50, 0 )
theme = ExtResource( 3 )
text = "PLAY"
__meta__ = {
"_edit_lock_": true
}

[node name="STOP" type="Button" parent="CanvasLayer/VBoxContainer/HBoxContainer3"]
margin_left = 108.0
margin_right = 158.0
margin_bottom = 25.0
rect_min_size = Vector2( 50, 0 )
theme = ExtResource( 3 )
text = "STOP"
__meta__ = {
"_edit_lock_": true
}

[node name="Names" type="CheckBox" parent="CanvasLayer/VBoxContainer/HBoxContainer3"]
margin_left = 162.0
margin_right = 237.0
margin_bottom = 25.0
rect_min_size = Vector2( 75, 0 )
theme = ExtResource( 3 )
text = "Names"

[node name="File" type="Label" parent="CanvasLayer/VBoxContainer/HBoxContainer3"]
margin_left = 241.0
margin_top = 4.0
margin_right = 356.0
margin_bottom = 21.0
theme = ExtResource( 3 )
text = "FILE NOT LOADED"
__meta__ = {
"_edit_lock_": true
}

[node name="HBoxContainer2" type="HBoxContainer" parent="CanvasLayer/VBoxContainer"]
margin_top = 29.0
margin_right = 784.0
margin_bottom = 46.0
size_flags_horizontal = 3

[node name="Label3" type="Label" parent="CanvasLayer/VBoxContainer/HBoxContainer2"]
margin_right = 47.0
margin_bottom = 17.0
theme = ExtResource( 3 )
text = "Volume"
__meta__ = {
"_edit_lock_": true
}

[node name="VolumeBar" type="HScrollBar" parent="CanvasLayer/VBoxContainer/HBoxContainer2"]
margin_left = 51.0
margin_right = 784.0
margin_bottom = 17.0
size_flags_horizontal = 3
size_flags_vertical = 3
theme = ExtResource( 3 )
min_value = -50.0
max_value = -10.0
value = -30.0
__meta__ = {
"_edit_lock_": true
}

[node name="HBoxContainer4" type="HBoxContainer" parent="CanvasLayer/VBoxContainer"]
margin_top = 50.0
margin_right = 784.0
margin_bottom = 67.0
size_flags_horizontal = 3

[node name="Label3" type="Label" parent="CanvasLayer/VBoxContainer/HBoxContainer4"]
margin_right = 30.0
margin_bottom = 17.0
theme = ExtResource( 3 )
text = "Time"
__meta__ = {
"_edit_lock_": true
}

[node name="TimeBar" type="HScrollBar" parent="CanvasLayer/VBoxContainer/HBoxContainer4"]
margin_left = 34.0
margin_right = 784.0
margin_bottom = 17.0
size_flags_horizontal = 3
size_flags_vertical = 3
theme = ExtResource( 3 )
__meta__ = {
"_edit_lock_": true
}

[node name="FileDialog" type="FileDialog" parent="CanvasLayer"]
margin_left = 17.1475
margin_top = 230.563
margin_right = 542.147
margin_bottom = 575.563
rect_scale = Vector2( 0.9, 0.9 )
theme = SubResource( 2 )
window_title = "Abrir un archivo"
resizable = true
mode = 0
access = 2
filters = PoolStringArray( "*.mid" )
current_dir = "/home/cristian/Documentos/Github"
current_path = "/home/cristian/Documentos/Github/"

[node name="SoundBank" type="FileDialog" parent="CanvasLayer"]
margin_left = 17.1475
margin_top = 230.563
margin_right = 542.147
margin_bottom = 575.563
rect_scale = Vector2( 0.9, 0.9 )
theme = SubResource( 2 )
window_title = "Abrir un archivo"
resizable = true
mode = 0
access = 2
filters = PoolStringArray( "*.sf2" )
current_dir = "/home/cristian/Documentos/Github"
current_path = "/home/cristian/Documentos/Github/"

[node name="HBoxContainer" type="HBoxContainer" parent="CanvasLayer"]
margin_left = 4.0
margin_top = 767.339
margin_right = 795.0
margin_bottom = 794.339

[node name="LoadSoundbank" type="Button" parent="CanvasLayer/HBoxContainer"]
margin_right = 35.0
margin_bottom = 27.0
theme = ExtResource( 3 )
text = "Open"

[node name="Label" type="Label" parent="CanvasLayer/HBoxContainer"]
margin_left = 39.0
margin_top = 5.0
margin_right = 150.0
margin_bottom = 22.0
theme = ExtResource( 3 )
text = "SF2 NOT LOADED"
[connection signal="pressed" from="CanvasLayer/VBoxContainer/HBoxContainer3/OpenButton" to="." method="_on_OpenButton_pressed"]
[connection signal="pressed" from="CanvasLayer/VBoxContainer/HBoxContainer3/PLAY" to="." method="_on_Play_pressed"]
[connection signal="pressed" from="CanvasLayer/VBoxContainer/HBoxContainer3/STOP" to="." method="_on_STOP_pressed"]
[connection signal="toggled" from="CanvasLayer/VBoxContainer/HBoxContainer3/Names" to="." method="_on_Names_toggled"]
[connection signal="file_selected" from="CanvasLayer/FileDialog" to="." method="_on_FileDialog_file_selected"]
[connection signal="file_selected" from="CanvasLayer/SoundBank" to="." method="_on_SoundBank_file_selected"]
[connection signal="pressed" from="CanvasLayer/HBoxContainer/LoadSoundbank" to="." method="_on_LoadSoundbank_pressed"]
